// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// from webkit2gtk-gir-files
// DO NOT EDIT
#![allow(deprecated)]

#[cfg(feature = "v2_40")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_40")))]
use crate::ScriptWorld;
use crate::{DOMNode, HitTestResult};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitWebHitTestResult")]
    pub struct WebHitTestResult(Object<ffi::WebKitWebHitTestResult, ffi::WebKitWebHitTestResultClass>) @extends HitTestResult;

    match fn {
        type_ => || ffi::webkit_web_hit_test_result_get_type(),
    }
}

impl WebHitTestResult {
    pub const NONE: Option<&'static WebHitTestResult> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::WebHitTestResult>> Sealed for T {}
}

pub trait WebHitTestResultExt: IsA<WebHitTestResult> + sealed::Sealed + 'static {
    #[cfg(feature = "v2_40")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_40")))]
    #[doc(alias = "webkit_web_hit_test_result_get_js_node")]
    #[doc(alias = "get_js_node")]
    fn js_node(&self, world: Option<&impl IsA<ScriptWorld>>) -> Option<javascriptcore::Value> {
        unsafe {
            from_glib_full(ffi::webkit_web_hit_test_result_get_js_node(
                self.as_ref().to_glib_none().0,
                world.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_web_hit_test_result_get_node")]
    #[doc(alias = "get_node")]
    fn node(&self) -> Option<DOMNode> {
        unsafe {
            from_glib_none(ffi::webkit_web_hit_test_result_get_node(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v2_40", deprecated = "Since 2.40")]
    fn get_property_node(&self) -> Option<DOMNode> {
        ObjectExt::property(self.as_ref(), "node")
    }
}

impl<O: IsA<WebHitTestResult>> WebHitTestResultExt for O {}

impl fmt::Display for WebHitTestResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("WebHitTestResult")
    }
}
