// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// from webkit2gtk-gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::{DOMElement, DOMEventTarget, DOMHTMLElement, DOMNode, DOMObject};
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLBaseFontElement")]
    pub struct DOMHTMLBaseFontElement(Object<ffi::WebKitDOMHTMLBaseFontElement, ffi::WebKitDOMHTMLBaseFontElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_base_font_element_get_type(),
    }
}

impl DOMHTMLBaseFontElement {
    pub const NONE: Option<&'static DOMHTMLBaseFontElement> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DOMHTMLBaseFontElement>> Sealed for T {}
}

pub trait DOMHTMLBaseFontElementExt:
    IsA<DOMHTMLBaseFontElement> + sealed::Sealed + 'static
{
    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_get_color")]
    #[doc(alias = "get_color")]
    fn color(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_base_font_element_get_color(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_get_face")]
    #[doc(alias = "get_face")]
    fn face(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::webkit_dom_html_base_font_element_get_face(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> libc::c_long {
        unsafe { ffi::webkit_dom_html_base_font_element_get_size(self.as_ref().to_glib_none().0) }
    }

    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_set_color")]
    fn set_color(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_base_font_element_set_color(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_set_face")]
    fn set_face(&self, value: &str) {
        unsafe {
            ffi::webkit_dom_html_base_font_element_set_face(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[cfg_attr(feature = "v2_12", deprecated = "Since 2.12")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_base_font_element_set_size")]
    fn set_size(&self, value: libc::c_long) {
        unsafe {
            ffi::webkit_dom_html_base_font_element_set_size(self.as_ref().to_glib_none().0, value);
        }
    }
}

impl<O: IsA<DOMHTMLBaseFontElement>> DOMHTMLBaseFontElementExt for O {}

impl fmt::Display for DOMHTMLBaseFontElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLBaseFontElement")
    }
}
