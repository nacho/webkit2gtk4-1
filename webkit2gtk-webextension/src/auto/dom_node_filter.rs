// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// from webkit2gtk-gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::DOMNode;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WebKitDOMNodeFilter")]
    pub struct DOMNodeFilter(Interface<ffi::WebKitDOMNodeFilter, ffi::WebKitDOMNodeFilterIface>);

    match fn {
        type_ => || ffi::webkit_dom_node_filter_get_type(),
    }
}

impl DOMNodeFilter {
    pub const NONE: Option<&'static DOMNodeFilter> = None;
}

pub trait DOMNodeFilterExt: 'static {
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_node_filter_accept_node")]
    fn accept_node(&self, node: &impl IsA<DOMNode>) -> libc::c_short;
}

impl<O: IsA<DOMNodeFilter>> DOMNodeFilterExt for O {
    #[allow(deprecated)]
    fn accept_node(&self, node: &impl IsA<DOMNode>) -> libc::c_short {
        unsafe {
            ffi::webkit_dom_node_filter_accept_node(
                self.as_ref().to_glib_none().0,
                node.as_ref().to_glib_none().0,
            )
        }
    }
}

impl fmt::Display for DOMNodeFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMNodeFilter")
    }
}
