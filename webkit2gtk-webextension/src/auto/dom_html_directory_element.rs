// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// from webkit2gtk-gir-files
// DO NOT EDIT
#![allow(deprecated)]

use crate::{DOMElement, DOMEventTarget, DOMHTMLElement, DOMNode, DOMObject};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "WebKitDOMHTMLDirectoryElement")]
    pub struct DOMHTMLDirectoryElement(Object<ffi::WebKitDOMHTMLDirectoryElement, ffi::WebKitDOMHTMLDirectoryElementClass>) @extends DOMHTMLElement, DOMElement, DOMNode, DOMObject, @implements DOMEventTarget;

    match fn {
        type_ => || ffi::webkit_dom_html_directory_element_get_type(),
    }
}

impl DOMHTMLDirectoryElement {
    pub const NONE: Option<&'static DOMHTMLDirectoryElement> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DOMHTMLDirectoryElement>> Sealed for T {}
}

pub trait DOMHTMLDirectoryElementExt:
    IsA<DOMHTMLDirectoryElement> + sealed::Sealed + 'static
{
    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_directory_element_get_compact")]
    #[doc(alias = "get_compact")]
    fn is_compact(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_dom_html_directory_element_get_compact(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v2_22", deprecated = "Since 2.22")]
    #[allow(deprecated)]
    #[doc(alias = "webkit_dom_html_directory_element_set_compact")]
    fn set_compact(&self, value: bool) {
        unsafe {
            ffi::webkit_dom_html_directory_element_set_compact(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "compact")]
    fn connect_compact_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_compact_trampoline<
            P: IsA<DOMHTMLDirectoryElement>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::WebKitDOMHTMLDirectoryElement,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DOMHTMLDirectoryElement::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::compact\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_compact_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<DOMHTMLDirectoryElement>> DOMHTMLDirectoryElementExt for O {}

impl fmt::Display for DOMHTMLDirectoryElement {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DOMHTMLDirectoryElement")
    }
}
